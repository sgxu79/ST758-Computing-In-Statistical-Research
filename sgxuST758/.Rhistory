lambda
lambda
lambda = sample(1:10,1)
lambda
library(testthat)
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
test_that("ridge_regression correctly calculates the ridge regression coefficients",{
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
})
expect_equal(Z,W)
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=2)
y = matrix(rnorm(5),ncol=1)
I = diag(2)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
expect_equal(Z,W)
Z
W
lambda = sample(1:10,1)
X = matrix(rnorm(10),ncol=5)
y = matrix(rnorm(2),ncol=1)
I = diag(5)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
Z
W
lambda = sample(1:10,1)
X = matrix(rnorm(500),ncol=20)
y = matrix(rnorm(25),ncol=1)
I = diag(20)
b_lam = ridge_regression(y,X,lambda)
Z = (t(X)%*%X+lambda*I)%*%b_lam
W = t(X)%*%y
expect_equal(Z,W)
Z
W
X
dim(X)
y
lambda=1
b_mat = ridge_regression(y,X,lambda)
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
i=1
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
H%*%y
y_hat = X%*%b_mat[,i]
y_hat
h_diag = diag(H)
h_diag
y-y_hat
plot(y-y_hat)
k_err = (y-y_hat)/(1-h_diag)
LOO[i] = mean(k_err^2)
LOO
leave_one_out(y,X,1:10)
leave_one_out(y,X,1:20)
leave_one_out(y,X,1:50)
leave_one_out(y,X,1:100)
leave_one_out(y,X,1:1000)
b_mat = ridge_regression(y,X,lambda)
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
i=1
lambda
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
k_err = (y-y_hat)/(1-h_diag)
length(k_err)
lambda=2
b_mat = ridge_regression(y,X,lambda)
Z = t(X)%*%X+lambda*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
h_diag
y=matrix(5,ncol=1,nrow=5)
y
length(y)
y=matrix(5,ncol=10,nrow=5)
length(y)
leave_one_out <- function(y,X,lambda) {
b_mat = ridge_regression(y,X,lambda)
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
for(i in 1:length(LOO)){
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
for(k in 1:length(y)){
k_err[k] = (y[k]-y_hat[k])/(1-h_diag[k])
}
LOO[i] = mean(k_err^2)
}
return(LOO)
}
leave_one_out(y,X,1:10)
X
y
X = matrix(rnorm(500),ncol=20)
y = matrix(rnorm(25),ncol=1)
leave_one_out(y,X,1:10)
leave_one_out(y,X,1:20)
leave_one_out(y,X,1:1000)
H
diag(H)
X=matrix(c(1,2,3,4),ncol=2)
X
diag(X)
1-diag(X)
leave_one_out <- function(y,X,lambda) {
b_mat = ridge_regression(y,X,lambda)
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
for(i in 1:length(LOO)){
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
k_err= (y-y_hat)/(1-h_diag)
LOO[i] = mean(k_err^2)
MSE[i] = mean((y-y_hat)^2)
}
return(LOO)
}
lambda=1:20
X = matrix(rnorm(6),ncol=2)
y= rnorm(3)
X
y
b_mat = ridge_regression(y,X,lambda)
b_mat
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
for(i in 1:length(LOO)){
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
k_err= (y-y_hat)/(1-h_diag)
LOO[i] = mean(k_err^2)
MSE[i] = mean((y-y_hat)^2)
}
MSE = numeric(length(lambda))
for(i in 1:length(LOO)){
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
k_err= (y-y_hat)/(1-h_diag)
LOO[i] = mean(k_err^2)
MSE[i] = mean((y-y_hat)^2)
}
MSE
LOO
(y-y_hat)^2
sum((y-y_hat)^2)
(y-y_hat)/(1-h_diag)
(y-y_hat)^2/(1-h_diag)^2
mean((y-y_hat)^2/(1-h_diag)^2)
lambda = c(1e-8,1e-6,1e-4,1e-2,1,10)
lambda = c(1e-8,1e-6,1e-4,1e-2,1,10)
b_lam = ridge_regression(y_pert,X_pert_1e2,lambda)
for(i in 1:length(lambda)){
re_err[i] = norm(matrix((b_lam[,i]-b_hat[,i]),ncol=1),'2')/norm(matrix(b_hat[,i],ncol=1),'2')
}
lambda = c(1e-8,1e-6,1e-4,1e-2,1,10)
b_lam = ridge_regression(y_pert,X_pert_1e2,lambda)
for(i in 1:length(lambda)){
re_err[i] = norm(matrix((b_lam[,i]-b_hat[,1]),ncol=1),'2')/norm(matrix(b_hat[,1],ncol=1),'2')
}
re_err
log(re_err)
plot(re_err)
log10(re_err)
X_noise = matrix(rnorm(2*n^2,0,5e-4),ncol=n,nrow=2*n)
y_noise = matrix(rnorm(2*n,0,1e-8),ncol=1)
X_pert_1e2 = X_1e2+X_noise
X_pert_1e3 = X_1e3+X_noise
X_pert_1e4 = X_1e4+X_noise
y_pert = y+y_noise
max(norm(X_noise,'2')/norm(X_1e2,'2'),norm(y_noise,'2')/norm(y,'2'))
max(norm(X_noise,'2')/norm(X_1e3,'2'),norm(y_noise,'2')/norm(y,'2'))
max(norm(X_noise,'2')/norm(X_1e4,'2'),norm(y_noise,'2')/norm(y,'2'))
b_hat_pert = matrix(0,ncol=3,nrow=n)
b_hat_pert[,1] = solve(t(X_pert_1e2)%*%X_pert_1e2,t(X_pert_1e2)%*%y_pert)
b_hat_pert[,2] = solve(t(X_pert_1e3)%*%X_pert_1e3,t(X_pert_1e3)%*%y_pert)
b_hat_pert[,3] = solve(t(X_pert_1e4)%*%X_pert_1e4,t(X_pert_1e4)%*%y_pert)
re_err = numeric(3)
for(i in 1:3){
re_err[i] = norm(matrix((b_hat_pert[,i]-b_hat[,i]),ncol=1),'2')/norm(matrix(b_hat[,i],ncol=1),'2')
}
n <- 10
u <- matrix(rnorm(n,5,1), ncol=1)
X <- tcrossprod(u)
diag(X) <- diag(X) + 2
X <- rbind(X,2*X)
y = matrix(rnorm(2*n,3,1),ncol=1)
s = svd(X)
d = s$d
u = s$u
v = s$v
d[n]<-1
d[2:(n-1)] <- 2
b_hat = matrix(0,ncol=3,nrow=n)
d[1]<-100
X_1e2 = u%*%diag(d)%*%t(v)
d[1]<-1000
X_1e3 = u%*%diag(d)%*%t(v)
d[1]<-10000
X_1e4 = u%*%diag(d)%*%t(v)
b_hat[,1] = solve(t(X_1e2)%*%X_1e2,t(X_1e2)%*%y)
b_hat[,2] = solve(t(X_1e3)%*%X_1e3,t(X_1e3)%*%y)
b_hat[,3] = solve(t(X_1e4)%*%X_1e4,t(X_1e4)%*%y)
X_noise = matrix(rnorm(2*n^2,0,5e-4),ncol=n,nrow=2*n)
y_noise = matrix(rnorm(2*n,0,1e-8),ncol=1)
X_pert_1e2 = X_1e2+X_noise
X_pert_1e3 = X_1e3+X_noise
X_pert_1e4 = X_1e4+X_noise
y_pert = y+y_noise
max(norm(X_noise,'2')/norm(X_1e2,'2'),norm(y_noise,'2')/norm(y,'2'))
max(norm(X_noise,'2')/norm(X_1e3,'2'),norm(y_noise,'2')/norm(y,'2'))
max(norm(X_noise,'2')/norm(X_1e4,'2'),norm(y_noise,'2')/norm(y,'2'))
b_hat_pert = matrix(0,ncol=3,nrow=n)
b_hat_pert[,1] = solve(t(X_pert_1e2)%*%X_pert_1e2,t(X_pert_1e2)%*%y_pert)
b_hat_pert[,2] = solve(t(X_pert_1e3)%*%X_pert_1e3,t(X_pert_1e3)%*%y_pert)
b_hat_pert[,3] = solve(t(X_pert_1e4)%*%X_pert_1e4,t(X_pert_1e4)%*%y_pert)
re_err = numeric(3)
for(i in 1:3){
re_err[i] = norm(matrix((b_hat_pert[,i]-b_hat[,i]),ncol=1),'2')/norm(matrix(b_hat[,i],ncol=1),'2')
}
re_err
lambda = c(1e-8,1e-7,1e-6,1e-5,1e-4,1e-2,1,10)
b_lam = ridge_regression(y_pert,X_pert_1e2,lambda)
for(i in 1:length(lambda)){
re_err[i] = norm(matrix((b_lam[,i]-b_hat[,1]),ncol=1),'2')/norm(matrix(b_hat[,1],ncol=1),'2')
}
re_err
X=matrix(c(1,0,0,1e-6,0,0),ncol=2)
X
X=matrix(c(1,0,0,0,1e-6,0),ncol=2)
X
y = matrix(c(1,0,1),ncol=1)
y
t(X)%*%X
X_noise = matrix(C(0,0,0,0,0,1e-8),ncol=2)
X_noise = matrix(C(0,0,0,0,0,1e-8),ncol=2)
X_noise = matrix(C(0,0,0,0,0),ncol=2)
X_noise = matrix(C(0,0,0,0,0,0),ncol=2)
c
c(2)
2
c(0,0,0,0)
matrix(c(0,0))
matrix(c(0,0,0,0,0,1e-8))
matrix(c(0,0,0,0,0,1e-8),ncol=2)
X_noise=matrix(c(0,0,0,0,0,1e-8),ncol=2)
X_noise
b_hat = solve((t(X)%*%X),(t(X)%*%y))
b_hat
X_pert = X+X_noise
X
X
X_pert
b_pert = solve((t(X_pert)%*%X_pert),(t(X_pert)%*%y))
b_pert
b_hat
lambda = c(1e-8,1e-7,1e-6,1e-5,1e-3,1e-4,1e-2,1)
b_lam = ridge_regression(y,X_pert,lambda)
b_lam
for(i in 1:length(lambda)){
re_err[i] = norm(matrix((b_lam[,i]-b_hat[,1]),ncol=1),'2')/norm(matrix(b_hat[,1],ncol=1),'2')
}
log10(re_err)
plot(re_err)
plot(log10(re_err))
plot(log10(lambda),log10(re_err))
leave_one_out(y,X_pert,lambda)
lambda
X_pert
y
kappa(X_pert)
n <- 10
u <- matrix(rnorm(n,5,1), ncol=1)
X <- tcrossprod(u)
diag(X) <- diag(X) + 2
X <- rbind(X,2*X)
y = matrix(rnorm(2*n,3,1),ncol=1)
s = svd(X)
d = s$d
u = s$u
v = s$v
d[n]<-1
d[2:(n-1)] <- 2
b_hat = matrix(0,ncol=3,nrow=n)
d[1]<-100
X_1e2 = u%*%diag(d)%*%t(v)
d[1]<-1000
X_1e3 = u%*%diag(d)%*%t(v)
d[1]<-10000
X_1e4 = u%*%diag(d)%*%t(v)
b_hat[,1] = solve(t(X_1e2)%*%X_1e2,t(X_1e2)%*%y)
b_hat[,2] = solve(t(X_1e3)%*%X_1e3,t(X_1e3)%*%y)
b_hat[,3] = solve(t(X_1e4)%*%X_1e4,t(X_1e4)%*%y)
kappa(X_1e2)
kappa(X_1e3)
kappa(X_1e4)
s=svd(X_1e2)
s$d
n <- 10
u <- matrix(rnorm(n,5,1), ncol=1)
X <- tcrossprod(u)
diag(X) <- diag(X) + 2
X <- rbind(X,2*X)
y = matrix(rnorm(2*n,3,1),ncol=1)
s = svd(X)
d = s$d
u = s$u
v = s$v
d[2:n] <- 1
b_hat = matrix(0,ncol=3,nrow=n)
d[1]<-100
X_1e2 = u%*%diag(d)%*%t(v)
d[1]<-1000
X_1e3 = u%*%diag(d)%*%t(v)
d[1]<-10000
X_1e4 = u%*%diag(d)%*%t(v)
b_hat[,1] = solve(t(X_1e2)%*%X_1e2,t(X_1e2)%*%y)
b_hat[,2] = solve(t(X_1e3)%*%X_1e3,t(X_1e3)%*%y)
b_hat[,3] = solve(t(X_1e4)%*%X_1e4,t(X_1e4)%*%y)
kappa(X_1e2)
kappa(X_1e3)
kappa(X_1e4)
matrix(c(1,0,0,1e-4),ncol=2)
A=matrix(c(1,0,0,1e-4),ncol=2)
kappa(A)
X_pert
kappa(X_pert)
svd(X_pert)$d
n <- 10
u <- matrix(rnorm(n,5,1), ncol=1)
X <- tcrossprod(u)
diag(X) <- diag(X) + 2
X <- rbind(X,2*X)
y = matrix(rnorm(2*n,3,1),ncol=1)
s = svd(X)
d = s$d
u = s$u
v = s$v
d[2:n] <- 1
b_hat = matrix(0,ncol=3,nrow=n)
d[1]<-200
X_1e2 = u%*%diag(d)%*%t(v)
d[1]<-2000
X_1e3 = u%*%diag(d)%*%t(v)
d[1]<-20000
X_1e4 = u%*%diag(d)%*%t(v)
b_hat[,1] = solve(t(X_1e2)%*%X_1e2,t(X_1e2)%*%y)
b_hat[,2] = solve(t(X_1e3)%*%X_1e3,t(X_1e3)%*%y)
b_hat[,3] = solve(t(X_1e4)%*%X_1e4,t(X_1e4)%*%y)
kappa(X_1e2)
kappa(X_1e3\)
kappa(X_1e3)
kappa(X_1e4)
kappa(X_1e2,exact = T)
n <- 10
u <- matrix(rnorm(n,5,1), ncol=1)
X <- tcrossprod(u)
diag(X) <- diag(X) + 2
X <- rbind(X,2*X)
y = matrix(rnorm(2*n,3,1),ncol=1)
s = svd(X)
d = s$d
u = s$u
v = s$v
d[2:n] <- 1
b_hat = matrix(0,ncol=3,nrow=n)
d[1]<-100
X_1e2 = u%*%diag(d)%*%t(v)
d[1]<-1000
X_1e3 = u%*%diag(d)%*%t(v)
d[1]<-10000
X_1e4 = u%*%diag(d)%*%t(v)
b_hat[,1] = solve(t(X_1e2)%*%X_1e2,t(X_1e2)%*%y)
b_hat[,2] = solve(t(X_1e3)%*%X_1e3,t(X_1e3)%*%y)
b_hat[,3] = solve(t(X_1e4)%*%X_1e4,t(X_1e4)%*%y)
kappa(X_1e2,exact = T)
kappa(X_1e3,exact = T)
kappa(X_1e4,exact = T)
x=1
ncol(X)
X
X=1
X
ncol(X)
y
t = c(1,0,1)
X = matrix(c(1,0,0,0,1e-6,0))
X
X = matrix(c(1,0,0,0,1e-6,0),ncol=2)
X
lambda=1
X
y
y=c(1,0,1)
y
X
b_mat = ridge_regression(y,X,lambda)
p = dim(X)[2]
I = diag(p)
LOO = numeric(length(lambda))
for(i in 1:length(lambda)){
Z = t(X)%*%X+lambda[i]*I
H = X%*%solve(Z)%*%t(X)
y_hat = X%*%b_mat[,i]
h_diag = diag(H)
k_err= (y-y_hat)/(1-h_diag)
LOO[i] = mean(k_err^2)
}
LOO
LOO[i] = sum(k_err^2)/length(y)
LOO
